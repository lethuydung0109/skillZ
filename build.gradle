plugins {
    id 'org.springframework.boot' version '2.4.3'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
    id 'com.cosminpolifronie.gradle.plantuml' version '1.6.0'
    id 'org.asciidoctor.jvm.pdf' version '3.1.0'
    id 'org.asciidoctor.jvm.gems' version '3.1.0'

}

apply plugin: 'application'
apply plugin: "com.cosminpolifronie.gradle.plantuml"
apply plugin: VersionPlugin

group = 'miage'
version = '1.4.0-release'
sourceCompatibility = '11'

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'javax.validation:validation-api'
    compile 'io.jsonwebtoken:jjwt-api:0.11.2'
    runtime 'io.jsonwebtoken:jjwt-impl:0.11.2'
    runtimeOnly 'mysql:mysql-connector-java'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    compile "org.apache.logging.log4j:log4j-api:2.5"
    compile "org.apache.logging.log4j:log4j-core:2.5"
    compile "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.5.0"
    asciidoctorGems 'rubygems:rouge:3.15.0'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'
	compile 'io.jsonwebtoken:jjwt-api:0.11.2'
	runtime 'io.jsonwebtoken:jjwt-impl:0.11.2'
	runtimeOnly 'mysql:mysql-connector-java'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
	compileOnly 'org.projectlombok:lombok:1.18.20'
	annotationProcessor 'org.projectlombok:lombok:1.18.20'
	testCompileOnly 'org.projectlombok:lombok:1.18.20'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'
	implementation 'org.hibernate.validator:hibernate-validator:6.1.2.Final'
	implementation "io.springfox:springfox-boot-starter:3.0.0"
    compile("io.springfox:springfox-swagger2:3.0.0")
    compile("io.springfox:springfox-swagger-ui:3.0.0")
}

repositories {
    mavenCentral()
    maven {url 'https://plugins.gradle.org/m2/'}
    jcenter()
    ruby.gems()
    mavenCentral()
}

plantUml {
    render input: 'src/docs/asciidoc/models/DiagrammeClass.puml', output: 'build/DiagrammeClass.svg', format: 'svg', withMetadata: false
}

// plugin to get the version of the project
// from https://stackoverflow.com/questions/13198358/how-to-get-project-version-in-custom-gradle-plugin
// uses version in build.gradle file
class VersionPlugin implements Plugin<Project> {
     void apply(Project project) {
        project.task('version') {
            project.gradle.projectsEvaluated {
                println "$project.version"
            }
        }
    }
}

asciidoctorPdf {
    dependsOn asciidoctorGemsPrepare
    baseDirFollowsSourceFile()
    asciidoctorj {
        requires 'rouge'
        modules {
            diagram.use()
        }
        attributes 'build-gradle': file('build.gradle'),
                'sourcedir': project.sourceSets.main.java.srcDirs[0],
                'endpoint-url': 'http://example.org',
                'source-highlighter': 'rouge',
                'rouge-style': 'github',
                'rouge-theme': 'github',
                'imagesdir': './images',
                'toc': 'left',
                'toclevels': 2,
                'icons': 'font',
                'idprefix': '',
                'idseparator': '-'
    }
}

task asciidoctor(dependsOn: asciidoctorPdf)



//test {
//	useJUnitPlatform()
//}
